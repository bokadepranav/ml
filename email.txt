Sure, let me provide an explanation for each line of the code you've provided:

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score

df = pd.read_csv('emails.csv')
```
In this part, the necessary libraries are imported, including pandas for data manipulation, numpy for numerical operations, and various libraries from scikit-learn for machine learning tasks. The dataset 'emails.csv' is read into a pandas DataFrame called `df`.

```python
null_counts = df.isnull().sum()
columns_with_nulls = null_counts[null_counts >= 1]
columns_with_nulls
```
These lines calculate the number of null values in each column and store the count in `null_counts`. Then, it selects columns with one or more null values using a conditional statement.

```python
df.info()
```
This line prints a concise summary of the DataFrame `df`, including the column names, the number of non-null values in each column, and the data types.

```python
X = df.iloc[:,1:3001]
X.head()
```
This creates a DataFrame `X` containing the features for the machine learning model. The range `1:3001` selects columns from the second to the 3000th column. The `.head()` function is used to display the first few rows of the DataFrame `X`.

```python
y = df.iloc[:,-1]
y.head()
```
This creates a Series `y` containing the target variable for the machine learning model. The `-1` index selects the last column in the DataFrame `df`. The `.head()` function is used to display the first few rows of the Series `y`.

```python
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=42)
```
This line splits the dataset into training and testing sets. It assigns 80% of the data to the training set (`X_train` and `y_train`) and 20% to the test set (`X_test` and `y_test`).

```python
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)
```
This initializes a `StandardScaler` object `sc` and then scales the training and testing data using the `fit_transform` method. Standard scaling is essential to ensure that each feature has a mean of 0 and a standard deviation of 1.

```python
knn_classifier = KNeighborsClassifier(n_neighbors=5)
knn_classifier.fit(X_train, y_train)
y_pred_knn = knn_classifier.predict(X_test)
```
These lines initialize a K-Nearest Neighbors (KNN) classifier with 5 neighbors, fits the model to the training data, and makes predictions on the test data.

```python
knn_accuracy = accuracy_score(y_test, y_pred_knn)
knn_confmatrix = confusion_matrix(y_test, y_pred_knn)
knn_report = classification_report(y_test, y_pred_knn)
```
These lines compute the accuracy score, confusion matrix, and classification report for the KNN model's performance on the test data.

```python
print("KNN Accuracy: ", knn_accuracy)
print("KNN Classification report: ", knn_report)
```
These lines print the accuracy and classification report of the KNN model.

```python
import seaborn as sns
sns.heatmap(knn_confmatrix, annot=True, fmt='.2f', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()
```
This code segment visualizes the confusion matrix using the seaborn library, displaying the true and predicted labels with annotations.

```python
svm_classifier = SVC()
svm_classifier.fit(X_train, y_train)
y_pred_svm = svm_classifier.predict(X_test)
```
These lines initialize a Support Vector Machine (SVM) classifier, fit the model to the training data, and make predictions on the test data.

```python
svm_accuracy = accuracy_score(y_test, y_pred_svm)
svm_confmatrix = confusion_matrix(y_test, y_pred_svm)
svm_report = classification_report(y_test, y_pred_svm)
```
These lines compute the accuracy score, confusion matrix, and classification report for the SVM model's performance on the test data.

```python
print("SVM Accuracy: ", svm_accuracy)
print("SVM Classification report: ", svm_report)
```
These lines print the accuracy and classification report of the SVM model.

```python
import seaborn as sns
sns.heatmap(svm_confmatrix, annot=True, fmt='.2f', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()
```
This code segment visualizes the confusion matrix using the seaborn library for the SVM model, displaying the true and predicted labels with annotations.