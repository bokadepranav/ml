Certainly, here's the line-by-line explanation for the provided code:

```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

These lines import the necessary libraries, including numpy, pandas, matplotlib, and seaborn, for data analysis and visualization.

```python
df = pd.read_csv('sales_data_sample.csv', encoding='latin1')
```

This line reads the dataset 'sales_data_sample.csv' into a pandas DataFrame called `df` using the 'latin1' encoding.

```python
print(df.head())
```

This line prints the first few rows of the DataFrame `df` to examine the data structure and contents.

```python
print(df.info())
```

This line prints the concise summary of the DataFrame `df`, including the data types and non-null counts for each column.

```python
fig = plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, fmt='.2f')
plt.show()
```

These lines create a correlation heatmap using seaborn to visualize the correlation between different numerical columns in the DataFrame.

```python
df = df[['PRICEEACH', 'MSRP']]
```

This line selects specific columns, 'PRICEEACH' and 'MSRP', from the DataFrame `df`.

```python
print(df.isna().any())
```

This line checks if there are any missing values in the selected columns and prints the results.

```python
inertia = []
for i in range(1, 11):
    clusters = KMeans(n_clusters=i, init='k-means++', random_state=42)
    clusters.fit(df)
    inertia.append(clusters.inertia_)

plt.figure(figsize=(6, 6))
sns.lineplot(x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=inertia)
```

These lines implement the K-Means clustering algorithm for different numbers of clusters (from 1 to 10) and store the inertia (sum of squared distances to the closest centroid for all points) for each number of clusters. The inertia values are then visualized in a line plot.

```python
kmeans = KMeans(n_clusters=3, random_state=42)
y_kmeans = kmeans.fit_predict(df)
```

This code segment initializes the K-Means clustering algorithm with the desired number of clusters (3 in this case) and fits the algorithm to the selected data.

```python
plt.figure(figsize=(8, 8))
sns.scatterplot(x=df['PRICEEACH'], y=df['MSRP'], hue=y_kmeans)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', label='Centroids')
plt.legend()
```

These lines create a scatter plot of the selected data points, colored according to the clusters identified by K-Means. Additionally, the centroids of the clusters are marked with red dots.

```python
plt.show()
```

This line displays the plot showing the clusters and their centroids.